{"ast":null,"code":"import _classCallCheck from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getRangeValue, getValue, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nexport var DestroyUpdater = /*#__PURE__*/function () {\n  function DestroyUpdater(engine, container) {\n    _classCallCheck(this, DestroyUpdater);\n    this.engine = engine;\n    this.container = container;\n  }\n  _createClass(DestroyUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var container = this.container,\n        particlesOptions = particle.options,\n        destroyOptions = particlesOptions.destroy;\n      if (!destroyOptions) {\n        return;\n      }\n      particle.splitCount = 0;\n      var destroyBounds = destroyOptions.bounds;\n      if (!particle.destroyBounds) {\n        particle.destroyBounds = {};\n      }\n      if (destroyBounds.bottom) {\n        particle.destroyBounds.bottom = getRangeValue(destroyBounds.bottom) * container.canvas.size.height / 100;\n      }\n      if (destroyBounds.left) {\n        particle.destroyBounds.left = getRangeValue(destroyBounds.left) * container.canvas.size.width / 100;\n      }\n      if (destroyBounds.right) {\n        particle.destroyBounds.right = getRangeValue(destroyBounds.right) * container.canvas.size.width / 100;\n      }\n      if (destroyBounds.top) {\n        particle.destroyBounds.top = getRangeValue(destroyBounds.top) * container.canvas.size.height / 100;\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.destroy) {\n        options.destroy = new Destroy();\n      }\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.destroy.load(source === null || source === void 0 ? void 0 : source.destroy);\n      }\n    }\n  }, {\n    key: \"particleDestroyed\",\n    value: function particleDestroyed(particle, override) {\n      if (override) {\n        return;\n      }\n      var destroyOptions = particle.options.destroy;\n      if (destroyOptions && destroyOptions.mode === \"split\") {\n        this.split(particle);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      var position = particle.getPosition(),\n        bounds = particle.destroyBounds;\n      if (!bounds) {\n        return;\n      }\n      if (bounds.bottom !== undefined && position.y >= bounds.bottom || bounds.left !== undefined && position.x <= bounds.left || bounds.right !== undefined && position.x >= bounds.right || bounds.top !== undefined && position.y <= bounds.top) {\n        particle.destroy();\n      }\n    }\n  }, {\n    key: \"addSplitParticle\",\n    value: function addSplitParticle(parent, splitParticlesOptions) {\n      var _a, _b, _c;\n      var destroyOptions = parent.options.destroy;\n      if (!destroyOptions) {\n        return;\n      }\n      var splitOptions = destroyOptions.split,\n        options = loadParticlesOptions(this.engine, this.container, parent.options),\n        factor = getValue(splitOptions.factor),\n        parentColor = parent.getFillColor();\n      if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n      } else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n          value: {\n            hsl: {\n              h: parentColor.h + getRangeValue((_a = splitOptions.colorOffset.h) !== null && _a !== void 0 ? _a : 0),\n              s: parentColor.s + getRangeValue((_b = splitOptions.colorOffset.s) !== null && _b !== void 0 ? _b : 0),\n              l: parentColor.l + getRangeValue((_c = splitOptions.colorOffset.l) !== null && _c !== void 0 ? _c : 0)\n            }\n          }\n        });\n      } else {\n        options.color.load({\n          value: {\n            hsl: parent.getFillColor()\n          }\n        });\n      }\n      options.move.load({\n        center: {\n          x: parent.position.x,\n          y: parent.position.y,\n          mode: \"precise\"\n        }\n      });\n      if (typeof options.size.value === \"number\") {\n        options.size.value /= factor;\n      } else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n      }\n      options.load(splitParticlesOptions);\n      var offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n        position = {\n          x: parent.position.x + randomInRange(offset),\n          y: parent.position.y + randomInRange(offset)\n        };\n      return this.container.particles.addParticle(position, options, parent.group, function (particle) {\n        var _a;\n        if (particle.size.value < 0.5) {\n          return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = ((_a = parent.splitCount) !== null && _a !== void 0 ? _a : 0) + 1;\n        particle.unbreakable = true;\n        setTimeout(function () {\n          particle.unbreakable = false;\n        }, 500);\n        return true;\n      });\n    }\n  }, {\n    key: \"split\",\n    value: function split(particle) {\n      var destroyOptions = particle.options.destroy;\n      if (!destroyOptions) {\n        return;\n      }\n      var splitOptions = destroyOptions.split;\n      if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n      }\n      var rate = getValue(splitOptions.rate),\n        particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n      for (var i = 0; i < rate; i++) {\n        this.addSplitParticle(particle, particlesSplitOptions);\n      }\n    }\n  }]);\n  return DestroyUpdater;\n}();","map":null,"metadata":{},"sourceType":"module"}