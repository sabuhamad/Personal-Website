{"ast":null,"code":"import _classCallCheck from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Range } from \"./Range\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport var Circle = /*#__PURE__*/function (_Range) {\n  _inherits(Circle, _Range);\n  function Circle(x, y, radius) {\n    var _this;\n    _classCallCheck(this, Circle);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Circle).call(this, x, y));\n    _this.radius = radius;\n    return _this;\n  }\n  _createClass(Circle, [{\n    key: \"contains\",\n    value: function contains(point) {\n      return getDistance(point, this.position) <= this.radius;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range) {\n      var rect = range,\n        circle = range,\n        pos1 = this.position,\n        pos2 = range.position,\n        distPos = {\n          x: Math.abs(pos2.x - pos1.x),\n          y: Math.abs(pos2.y - pos1.y)\n        },\n        r = this.radius;\n      if (circle.radius !== undefined) {\n        var rSum = r + circle.radius,\n          dist = Math.sqrt(Math.pow(distPos.x, 2) + Math.pow(distPos.y, 2));\n        return rSum > dist;\n      } else if (rect.size !== undefined) {\n        var w = rect.size.width,\n          h = rect.size.height,\n          edges = Math.pow(distPos.x - w, 2) + Math.pow(distPos.y - h, 2);\n        return edges <= Math.pow(r, 2) || distPos.x <= r + w && distPos.y <= r + h || distPos.x <= w || distPos.y <= h;\n      }\n      return false;\n    }\n  }]);\n  return Circle;\n}(Range);","map":null,"metadata":{},"sourceType":"module"}