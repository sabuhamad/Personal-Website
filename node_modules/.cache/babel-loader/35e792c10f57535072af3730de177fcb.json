{"ast":null,"code":"import _classCallCheck from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport var QuadTree = /*#__PURE__*/function () {\n  function QuadTree(rectangle, capacity) {\n    _classCallCheck(this, QuadTree);\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this._points = [];\n    this._divided = false;\n  }\n  _createClass(QuadTree, [{\n    key: \"insert\",\n    value: function insert(point) {\n      var _a, _b, _c, _d, _e;\n      if (!this.rectangle.contains(point.position)) {\n        return false;\n      }\n      if (this._points.length < this.capacity) {\n        this._points.push(point);\n        return true;\n      }\n      if (!this._divided) {\n        this.subdivide();\n      }\n      return (_e = ((_a = this._NE) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this._NW) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this._SE) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this._SW) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n    }\n  }, {\n    key: \"query\",\n    value: function query(range, check, found) {\n      var _a, _b, _c, _d;\n      var res = found !== null && found !== void 0 ? found : [];\n      if (!range.intersects(this.rectangle)) {\n        return [];\n      }\n      var _iterator = _createForOfIteratorHelper(this._points),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius() && (!check || check(p.particle))) {\n            continue;\n          }\n          res.push(p.particle);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (this._divided) {\n        (_a = this._NE) === null || _a === void 0 ? void 0 : _a.query(range, check, res);\n        (_b = this._NW) === null || _b === void 0 ? void 0 : _b.query(range, check, res);\n        (_c = this._SE) === null || _c === void 0 ? void 0 : _c.query(range, check, res);\n        (_d = this._SW) === null || _d === void 0 ? void 0 : _d.query(range, check, res);\n      }\n      return res;\n    }\n  }, {\n    key: \"queryCircle\",\n    value: function queryCircle(position, radius, check) {\n      return this.query(new Circle(position.x, position.y, radius), check);\n    }\n  }, {\n    key: \"queryRectangle\",\n    value: function queryRectangle(position, size, check) {\n      return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n  }, {\n    key: \"subdivide\",\n    value: function subdivide() {\n      var x = this.rectangle.position.x,\n        y = this.rectangle.position.y,\n        w = this.rectangle.size.width,\n        h = this.rectangle.size.height,\n        capacity = this.capacity;\n      this._NE = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n      this._NW = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n      this._SE = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n      this._SW = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n      this._divided = true;\n    }\n  }]);\n  return QuadTree;\n}();","map":null,"metadata":{},"sourceType":"module"}