{"ast":null,"code":"import _classCallCheck from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, randomInRange } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n  switch (particle.options.opacity.animation.destroy) {\n    case \"max\":\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n      break;\n    case \"min\":\n      if (value <= minValue) {\n        particle.destroy();\n      }\n      break;\n  }\n}\nfunction updateOpacity(particle, delta) {\n  var _a, _b, _c, _d, _e, _f;\n  if (!particle.opacity) {\n    return;\n  }\n  var minValue = particle.opacity.min,\n    maxValue = particle.opacity.max,\n    decay = (_a = particle.opacity.decay) !== null && _a !== void 0 ? _a : 1;\n  if (particle.destroyed || !particle.opacity.enable || ((_b = particle.opacity.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.opacity.loops) !== null && _c !== void 0 ? _c : 0) > ((_d = particle.opacity.maxLoops) !== null && _d !== void 0 ? _d : 0)) {\n    return;\n  }\n  switch (particle.opacity.status) {\n    case \"increasing\":\n      if (particle.opacity.value >= maxValue) {\n        particle.opacity.status = \"decreasing\";\n        if (!particle.opacity.loops) {\n          particle.opacity.loops = 0;\n        }\n        particle.opacity.loops++;\n      } else {\n        particle.opacity.value += ((_e = particle.opacity.velocity) !== null && _e !== void 0 ? _e : 0) * delta.factor;\n      }\n      break;\n    case \"decreasing\":\n      if (particle.opacity.value <= minValue) {\n        particle.opacity.status = \"increasing\";\n        if (!particle.opacity.loops) {\n          particle.opacity.loops = 0;\n        }\n        particle.opacity.loops++;\n      } else {\n        particle.opacity.value -= ((_f = particle.opacity.velocity) !== null && _f !== void 0 ? _f : 0) * delta.factor;\n      }\n      break;\n  }\n  if (particle.opacity.velocity && particle.opacity.decay !== 1) {\n    particle.opacity.velocity *= decay;\n  }\n  checkDestroy(particle, particle.opacity.value, minValue, maxValue);\n  if (!particle.destroyed) {\n    particle.opacity.value = clamp(particle.opacity.value, minValue, maxValue);\n  }\n}\nexport var OpacityUpdater = /*#__PURE__*/function () {\n  function OpacityUpdater(container) {\n    _classCallCheck(this, OpacityUpdater);\n    this.container = container;\n  }\n  _createClass(OpacityUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var opacityOptions = particle.options.opacity;\n      particle.opacity = {\n        enable: opacityOptions.animation.enable,\n        max: getRangeMax(opacityOptions.value),\n        min: getRangeMin(opacityOptions.value),\n        value: getRangeValue(opacityOptions.value),\n        loops: 0,\n        maxLoops: getRangeValue(opacityOptions.animation.count)\n      };\n      var opacityAnimation = opacityOptions.animation;\n      if (opacityAnimation.enable) {\n        particle.opacity.decay = 1 - getRangeValue(opacityAnimation.decay);\n        particle.opacity.status = \"increasing\";\n        var opacityRange = opacityOptions.value;\n        particle.opacity.min = getRangeMin(opacityRange);\n        particle.opacity.max = getRangeMax(opacityRange);\n        switch (opacityAnimation.startValue) {\n          case \"min\":\n            particle.opacity.value = particle.opacity.min;\n            particle.opacity.status = \"increasing\";\n            break;\n          case \"random\":\n            particle.opacity.value = randomInRange(particle.opacity);\n            particle.opacity.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n            break;\n          case \"max\":\n          default:\n            particle.opacity.value = particle.opacity.max;\n            particle.opacity.status = \"decreasing\";\n            break;\n        }\n        particle.opacity.velocity = getRangeValue(opacityAnimation.speed) / 100 * this.container.retina.reduceFactor;\n        if (!opacityAnimation.sync) {\n          particle.opacity.velocity *= getRandom();\n        }\n      }\n      particle.opacity.initialValue = particle.opacity.value;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a, _b, _c, _d;\n      return !particle.destroyed && !particle.spawning && !!particle.opacity && particle.opacity.enable && (((_a = particle.opacity.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 || ((_b = particle.opacity.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.opacity.loops) !== null && _c !== void 0 ? _c : 0) < ((_d = particle.opacity.maxLoops) !== null && _d !== void 0 ? _d : 0));\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(particle) {\n      if (particle.opacity) {\n        particle.opacity.loops = 0;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      updateOpacity(particle, delta);\n    }\n  }]);\n  return OpacityUpdater;\n}();","map":null,"metadata":{},"sourceType":"module"}