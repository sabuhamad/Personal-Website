{"ast":null,"code":"import _classCallCheck from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sabuhamad/Documents/GitHub/Personal-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateAngle(particle, delta) {\n  var _a, _b;\n  var rotate = particle.rotate,\n    rotateOptions = particle.options.rotate;\n  if (!rotate || !rotateOptions) {\n    return;\n  }\n  var rotateAnimation = rotateOptions.animation,\n    speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n    max = 2 * Math.PI,\n    decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n  if (!rotateAnimation.enable) {\n    return;\n  }\n  switch (rotate.status) {\n    case \"increasing\":\n      rotate.value += speed;\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n      break;\n    case \"decreasing\":\n    default:\n      rotate.value -= speed;\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n      break;\n  }\n  if (rotate.velocity && decay !== 1) {\n    rotate.velocity *= decay;\n  }\n}\nexport var RotateUpdater = /*#__PURE__*/function () {\n  function RotateUpdater(container) {\n    _classCallCheck(this, RotateUpdater);\n    this.container = container;\n  }\n  _createClass(RotateUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var rotateOptions = particle.options.rotate;\n      if (!rotateOptions) {\n        return;\n      }\n      particle.rotate = {\n        enable: rotateOptions.animation.enable,\n        value: getRangeValue(rotateOptions.value) * Math.PI / 180\n      };\n      particle.pathRotation = rotateOptions.path;\n      var rotateDirection = rotateOptions.direction;\n      if (rotateDirection === \"random\") {\n        var index = Math.floor(getRandom() * 2);\n        rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n      }\n      switch (rotateDirection) {\n        case \"counter-clockwise\":\n        case \"counterClockwise\":\n          particle.rotate.status = \"decreasing\";\n          break;\n        case \"clockwise\":\n          particle.rotate.status = \"increasing\";\n          break;\n      }\n      var rotateAnimation = rotateOptions.animation;\n      if (rotateAnimation.enable) {\n        particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n        particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n        if (!rotateAnimation.sync) {\n          particle.rotate.velocity *= getRandom();\n        }\n      }\n      particle.rotation = particle.rotate.value;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var rotate = particle.options.rotate;\n      if (!rotate) {\n        return false;\n      }\n      return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.rotate) {\n        options.rotate = new Rotate();\n      }\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.rotate.load(source === null || source === void 0 ? void 0 : source.rotate);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      var _a, _b;\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      updateAngle(particle, delta);\n      particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n    }\n  }]);\n  return RotateUpdater;\n}();","map":null,"metadata":{},"sourceType":"module"}