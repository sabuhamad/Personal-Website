{"ast":null,"code":"import _asyncToGenerator from \"/Users/sabuhamad/Desktop/Personal_Website/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sabuhamad/Desktop/Personal_Website/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/sabuhamad/Desktop/Personal_Website/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sabuhamad/Desktop/Personal_Website/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { clear as _clear, drawParticle as _drawParticle, drawParticlePlugin as _drawParticlePlugin, drawPlugin as _drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n  var newValue = newFactor[key];\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\nexport var Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    var _this = this;\n    _classCallCheck(this, Canvas);\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generated = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n    this._mutationObserver = !isSsr() && typeof MutationObserver !== \"undefined\" ? new MutationObserver(function (records) {\n      var _iterator = _createForOfIteratorHelper(records),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var record = _step.value;\n          if (record.type === \"attributes\" && record.attributeName === \"style\") {\n            _this._repairStyle();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }) : undefined;\n  }\n  _createClass(Canvas, [{\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n      var options = this.container.actualOptions,\n        trail = options.particles.move.trail,\n        trailFill = this._trailFill;\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && trailFill) {\n        if (trailFill.color) {\n          this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n        } else if (trailFill.image) {\n          this._paintImage(trailFill.image, trailFill.opacity);\n        }\n      } else {\n        this.draw(function (ctx) {\n          _clear(ctx, _this2.size);\n        });\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a, _b;\n      (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n      if (this._generated) {\n        (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n      } else {\n        this._resetOriginalStyle();\n      }\n      this.stop();\n      this._preDrawUpdaters = [];\n      this._postDrawUpdaters = [];\n      this._resizePlugins = [];\n      this._colorPlugins = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(cb) {\n      if (!this._context) {\n        return;\n      }\n      return cb(this._context);\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this3 = this;\n      var _a;\n      if (particle.spawning || particle.destroyed) {\n        return;\n      }\n      var radius = particle.getRadius();\n      if (radius <= 0) {\n        return;\n      }\n      var pfColor = particle.getFillColor(),\n        psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n      var _this$_getPluginParti = this._getPluginParticleColors(particle),\n        _this$_getPluginParti2 = _slicedToArray(_this$_getPluginParti, 2),\n        fColor = _this$_getPluginParti2[0],\n        sColor = _this$_getPluginParti2[1];\n      if (!fColor) {\n        fColor = pfColor;\n      }\n      if (!sColor) {\n        sColor = psColor;\n      }\n      if (!fColor && !sColor) {\n        return;\n      }\n      this.draw(function (ctx) {\n        var _a, _b, _c, _d;\n        var options = _this3.container.actualOptions,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n          opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n          strokeOpacity = (_d = particle.strokeOpacity) !== null && _d !== void 0 ? _d : opacity,\n          zOpacity = opacity * zOpacityFactor,\n          zStrokeOpacity = strokeOpacity * zOpacityFactor,\n          transform = {},\n          colorStyles = {\n            fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n          };\n        colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n        _this3._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n        _drawParticle({\n          container: _this3.container,\n          context: ctx,\n          particle: particle,\n          delta: delta,\n          colorStyles: colorStyles,\n          backgroundMask: options.backgroundMask.enable,\n          composite: options.backgroundMask.composite,\n          radius: radius * Math.pow(1 - particle.zIndexFactor, zIndexOptions.sizeRate),\n          opacity: zOpacity,\n          shadow: particle.options.shadow,\n          transform: transform\n        });\n        _this3._applyPostDrawUpdaters(particle);\n      });\n    }\n  }, {\n    key: \"drawParticlePlugin\",\n    value: function drawParticlePlugin(plugin, particle, delta) {\n      this.draw(function (ctx) {\n        _drawParticlePlugin(ctx, plugin, particle, delta);\n      });\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      this.draw(function (ctx) {\n        _drawPlugin(ctx, plugin, delta);\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _a;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.resize();\n              this._initStyle();\n              this._initCover();\n              _context.prev = 3;\n              _context.next = 6;\n              return this._initTrail();\n            case 6:\n              _context.next = 11;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0);\n            case 11:\n              this.initBackground();\n              if (this.element) {\n                (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, {\n                  attributes: true\n                });\n              }\n              this.initUpdaters();\n              this.initPlugins();\n              this.paint();\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[3, 8]]);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.actualOptions,\n        background = options.background,\n        element = this.element,\n        elementStyle = element === null || element === void 0 ? void 0 : element.style;\n      if (!elementStyle) {\n        return;\n      }\n      if (background.color) {\n        var color = rangeColorToRgb(background.color);\n        elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n      } else {\n        elementStyle.backgroundColor = \"\";\n      }\n      elementStyle.backgroundImage = background.image || \"\";\n      elementStyle.backgroundPosition = background.position || \"\";\n      elementStyle.backgroundRepeat = background.repeat || \"\";\n      elementStyle.backgroundSize = background.size || \"\";\n    }\n  }, {\n    key: \"initPlugins\",\n    value: function initPlugins() {\n      this._resizePlugins = [];\n      var _iterator2 = _createForOfIteratorHelper(this.container.plugins),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            plugin = _step2$value[1];\n          if (plugin.resize) {\n            this._resizePlugins.push(plugin);\n          }\n          if (plugin.particleFillColor || plugin.particleStrokeColor) {\n            this._colorPlugins.push(plugin);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"initUpdaters\",\n    value: function initUpdaters() {\n      this._preDrawUpdaters = [];\n      this._postDrawUpdaters = [];\n      var _iterator3 = _createForOfIteratorHelper(this.container.particles.updaters),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var updater = _step3.value;\n          if (updater.afterDraw) {\n            this._postDrawUpdaters.push(updater);\n          }\n          if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n            this._preDrawUpdaters.push(updater);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas) {\n      var _a, _b;\n      if (this._generated) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n      this._generated = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generated;\n      this.element = canvas;\n      this.element.ariaHidden = \"true\";\n      this._originalStyle = deepExtend({}, this.element.style);\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this._context = this.element.getContext(\"2d\");\n      (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, {\n        attributes: true\n      });\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var _this4 = this;\n      var options = this.container.actualOptions;\n      this.draw(function (ctx) {\n        if (options.backgroundMask.enable && options.backgroundMask.cover) {\n          _clear(ctx, _this4.size);\n          _this4._paintBase(_this4._coverColorStyle);\n        } else {\n          _this4._paintBase();\n        }\n      });\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n      var container = this.container,\n        pxRatio = container.retina.pixelRatio,\n        size = container.canvas.size,\n        newSize = {\n          width: this.element.offsetWidth * pxRatio,\n          height: this.element.offsetHeight * pxRatio\n        };\n      if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n        return;\n      }\n      var oldSize = Object.assign({}, size);\n      this.element.width = size.width = this.element.offsetWidth * pxRatio;\n      this.element.height = size.height = this.element.offsetHeight * pxRatio;\n      if (this.container.started) {\n        this.resizeFactor = {\n          width: size.width / oldSize.width,\n          height: size.height / oldSize.height\n        };\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this5 = this;\n      this.draw(function (ctx) {\n        _clear(ctx, _this5.size);\n      });\n    }\n  }, {\n    key: \"windowResize\",\n    value: function () {\n      var _windowResize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var container, needsRefresh;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (this.element) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 2:\n              this.resize();\n              container = this.container, needsRefresh = container.updateActualOptions();\n              container.particles.setDensity();\n              this._applyResizePlugins();\n              if (!needsRefresh) {\n                _context2.next = 9;\n                break;\n              }\n              _context2.next = 9;\n              return container.refresh();\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function windowResize() {\n        return _windowResize.apply(this, arguments);\n      }\n      return windowResize;\n    }()\n  }, {\n    key: \"_applyPostDrawUpdaters\",\n    value: function _applyPostDrawUpdaters(particle) {\n      var _a;\n      var _iterator4 = _createForOfIteratorHelper(this._postDrawUpdaters),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var updater = _step4.value;\n          (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"_applyPreDrawUpdaters\",\n    value: function _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n      var _a;\n      var _iterator5 = _createForOfIteratorHelper(this._preDrawUpdaters),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var updater = _step5.value;\n          if (updater.getColorStyles) {\n            var _updater$getColorStyl = updater.getColorStyles(particle, ctx, radius, zOpacity),\n              fill = _updater$getColorStyl.fill,\n              stroke = _updater$getColorStyl.stroke;\n            if (fill) {\n              colorStyles.fill = fill;\n            }\n            if (stroke) {\n              colorStyles.stroke = stroke;\n            }\n          }\n          if (updater.getTransformValues) {\n            var updaterTransform = updater.getTransformValues(particle);\n            for (var key in updaterTransform) {\n              setTransformValue(transform, updaterTransform, key);\n            }\n          }\n          (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_applyResizePlugins\",\n    value: function _applyResizePlugins() {\n      var _iterator6 = _createForOfIteratorHelper(this._resizePlugins),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var plugin = _step6.value;\n          if (plugin.resize) {\n            plugin.resize();\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"_getPluginParticleColors\",\n    value: function _getPluginParticleColors(particle) {\n      var fColor, sColor;\n      var _iterator7 = _createForOfIteratorHelper(this._colorPlugins),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var plugin = _step7.value;\n          if (!fColor && plugin.particleFillColor) {\n            fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n          }\n          if (!sColor && plugin.particleStrokeColor) {\n            sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n          }\n          if (fColor && sColor) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return [fColor, sColor];\n    }\n  }, {\n    key: \"_initCover\",\n    value: function _initCover() {\n      var options = this.container.actualOptions,\n        cover = options.backgroundMask.cover,\n        color = cover.color,\n        coverRgb = rangeColorToRgb(color);\n      if (coverRgb) {\n        var coverColor = {\n          r: coverRgb.r,\n          g: coverRgb.g,\n          b: coverRgb.b,\n          a: cover.opacity\n        };\n        this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n      }\n    }\n  }, {\n    key: \"_initStyle\",\n    value: function _initStyle() {\n      var element = this.element,\n        options = this.container.actualOptions;\n      if (!element) {\n        return;\n      }\n      if (this._fullScreen) {\n        this._originalStyle = deepExtend({}, element.style);\n        this._setFullScreenStyle();\n      } else {\n        this._resetOriginalStyle();\n      }\n      for (var key in options.style) {\n        if (!key || !options.style) {\n          continue;\n        }\n        var value = options.style[key];\n        if (!value) {\n          continue;\n        }\n        element.style.setProperty(key, value, \"important\");\n      }\n    }\n  }, {\n    key: \"_initTrail\",\n    value: function () {\n      var _initTrail2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this6 = this;\n        var options, trail, trailFill, fillColor, _trail;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n              if (trail.enable) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 3:\n              if (!trailFill.color) {\n                _context3.next = 11;\n                break;\n              }\n              fillColor = rangeColorToRgb(trailFill.color);\n              if (fillColor) {\n                _context3.next = 7;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 7:\n              _trail = options.particles.move.trail;\n              this._trailFill = {\n                color: Object.assign({}, fillColor),\n                opacity: 1 / _trail.length\n              };\n              _context3.next = 13;\n              break;\n            case 11:\n              _context3.next = 13;\n              return new Promise(function (resolve, reject) {\n                if (!trailFill.image) {\n                  return;\n                }\n                var img = document.createElement(\"img\");\n                img.addEventListener(\"load\", function () {\n                  _this6._trailFill = {\n                    image: img,\n                    opacity: 1 / trail.length\n                  };\n                  resolve();\n                });\n                img.addEventListener(\"error\", function (evt) {\n                  reject(evt.error);\n                });\n                img.src = trailFill.image;\n              });\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _initTrail() {\n        return _initTrail2.apply(this, arguments);\n      }\n      return _initTrail;\n    }()\n  }, {\n    key: \"_paintBase\",\n    value: function _paintBase(baseColor) {\n      var _this7 = this;\n      this.draw(function (ctx) {\n        paintBase(ctx, _this7.size, baseColor);\n      });\n    }\n  }, {\n    key: \"_paintImage\",\n    value: function _paintImage(image, opacity) {\n      var _this8 = this;\n      this.draw(function (ctx) {\n        paintImage(ctx, _this8.size, image, opacity);\n      });\n    }\n  }, {\n    key: \"_repairStyle\",\n    value: function _repairStyle() {\n      var _a, _b;\n      var element = this.element;\n      if (!element) {\n        return;\n      }\n      (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n      this._initStyle();\n      this.initBackground();\n      (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, {\n        attributes: true\n      });\n    }\n  }, {\n    key: \"_resetOriginalStyle\",\n    value: function _resetOriginalStyle() {\n      var element = this.element,\n        originalStyle = this._originalStyle;\n      if (!(element && originalStyle)) {\n        return;\n      }\n      element.style.position = originalStyle.position;\n      element.style.zIndex = originalStyle.zIndex;\n      element.style.top = originalStyle.top;\n      element.style.left = originalStyle.left;\n      element.style.width = originalStyle.width;\n      element.style.height = originalStyle.height;\n    }\n  }, {\n    key: \"_setFullScreenStyle\",\n    value: function _setFullScreenStyle() {\n      var element = this.element;\n      if (!element) {\n        return;\n      }\n      var priority = \"important\";\n      element.style.setProperty(\"position\", \"fixed\", priority);\n      element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n      element.style.setProperty(\"top\", \"0\", priority);\n      element.style.setProperty(\"left\", \"0\", priority);\n      element.style.setProperty(\"width\", \"100%\", priority);\n      element.style.setProperty(\"height\", \"100%\", priority);\n    }\n  }, {\n    key: \"_fullScreen\",\n    get: function get() {\n      return this.container.actualOptions.fullScreen.enable;\n    }\n  }]);\n  return Canvas;\n}();","map":null,"metadata":{},"sourceType":"module"}